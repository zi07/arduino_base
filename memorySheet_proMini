#define NUMBER_OF_SHIFT_CHIPS   1
#define DATA_WIDTH   NUMBER_OF_SHIFT_CHIPS * 8
#define PULSE_WIDTH_USEC   5
#define POLL_DELAY_MSEC   1
#define BYTES_VAL_T unsigned int

int ploadPin        = 16;  // Connects to Parallel load pin the 165 //A2
int clockEnablePin  = 17;  // Connects to Clock Enable pin the 165 //A3
int dataPin         = 14; // Connects to the Q7 pin the 165 //A0
int clockPin        = 15; // Connects to the Clock pin the 165 //A1

BYTES_VAL_T pinValues;
BYTES_VAL_T oldPinValues;
BYTES_VAL_T read_shift_regs() {
    long bitVal;
    BYTES_VAL_T bytesVal = 0;
    digitalWrite(clockEnablePin, HIGH);
    digitalWrite(ploadPin, LOW);
    delayMicroseconds(PULSE_WIDTH_USEC);
    digitalWrite(ploadPin, HIGH);
    digitalWrite(clockEnablePin, LOW);
    for(int i = 0; i < DATA_WIDTH; i++)
    {
        bitVal = digitalRead(dataPin);
        bytesVal |= (bitVal << ((DATA_WIDTH-1) - i));
        digitalWrite(clockPin, HIGH);
        delayMicroseconds(PULSE_WIDTH_USEC);
        digitalWrite(clockPin, LOW);
    }
    return(bytesVal);
}

void display_pin_values() {
    //Serial.print("Pin States:\r\n");
    for(int i = 0; i < DATA_WIDTH; i++)
    {
        if((pinValues >> i) & 1)
            Serial.print("1");
        else
            Serial.print("0");
    }
    Serial.print("\r\n");
}

void setup() {
    Serial.begin(115200);

    pinMode(ploadPin, OUTPUT);
    pinMode(clockEnablePin, OUTPUT);
    pinMode(clockPin, OUTPUT);
    pinMode(dataPin, INPUT);

    digitalWrite(clockPin, LOW);
    digitalWrite(ploadPin, HIGH);

    pinValues = read_shift_regs();
    display_pin_values();
    oldPinValues = pinValues;
}

void loop() {
    pinValues = read_shift_regs();
    if(pinValues != oldPinValues)
    {
        //Serial.print("*Pin value change detected*\r\n");
        display_pin_values();
        oldPinValues = pinValues;
    }
    delay(POLL_DELAY_MSEC);
}



/* 74HC595 Code (Output) 
void setup() {
  pinMode(5, OUTPUT);
  pinMode(6, OUTPUT);
  pinMode(4, OUTPUT);
}
void loop() {
  for (int i = 0 ; i < 8 ; i++) {
    // latch의 비활성화하여 데이터를 입력받도록 설정합니다.
    digitalWrite(5, LOW); //latch pin D5
    // 데이터로 입력된 값을 클럭 펄스로 동기화하여 시프트 레지스터에 저장합니다.
    shiftOut(4, 6, MSBFIRST, 1 << i); //clock pin D6, data pin D4
    // latch를 활성화하여 저장된 입력된 데이터를 출력핀으로 전달합니다.
    digitalWrite(5, HIGH);
    delay(10);
  }
}
*/
